Reverse engineer the Boost Graph Library adjacency list implementation of a graph.

= Introduction =

The graph will be directed, sparse, unweighted, possibly connected, and possibly cyclic.

You must not use new, delete, malloc(), free(), or std::allocator. All memory management must be handled by STL containers.

You also must produce a UML class diagram of the relationships between all of your classes. You can either do this by hand or by using any UML editor of your choice.


= Details =

The adjacency_list class implements a generalized adjacency list graph structure. The template parameters provide many configuration options so that you can pick a version of the class that best meets your needs. An adjacency-list is basically a two-dimensional structure, where each element of the first dimension represents a vertex, and each of the vertices contains a one-dimensional structure that is its edge list.

The VertexList template parameter of the adjacency_list class controls what kind of container is used to represent the outer two-dimensional container. The OutEdgeList template parameter controls what kind of container is used to represent the edge lists. The choices for OutEdgeList and VertexList will determine the space complexity of the graph structure, and will determine the time complexity of the various graph operations. The possible choices and tradeoffs are discussed in Section Choosing the Edgelist and VertexList.
The Directed template parameter controls whether the graph is directed, undirected, or directed with access to both the in-edges and out-edges (which we call bidirectional). The bidirectional graph takes up twice the space (per edge) of a directed graph since each edge will appear in both an out-edge and in-edge list.